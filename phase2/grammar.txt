progam:  functions                              
        ;

functions:      /* epsilon */                   
        | function functions                    
        ;

function: FUNCTION ident SEMICOLON BEGINPARAMS declarations ENDPARAMS BEGINLOCALS declarations ENDLOCALS BEGINBODY statements ENDBODY                     
        ;

declarations: /* epsilon */                     
        | declaration SEMICOLON declarations    
        ;

declaration: identifiers COLON INTEGER          
        | identifiers COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER
        ;

identifiers: ident                              
        | ident COMMA identifiers               
        ;

ident: IDENT                                    
        ;

statements: /* epsilon */                       
        | statement SEMICOLON statements        
        ;

statement: var ASSIGN expression                
        | IF bool_exp THEN statements ENDIF     
        | IF bool_exp THEN statements ELSE statements ENDIF
        | WHILE bool_exp BEGINLOOP statements ENDLOOP
        | DO BEGINLOOP statements ENDLOOP WHILE bool_exp
        | FOREACH ident IN ident BEGINLOOP statements ENDLOOP
        | READ vars                             
        | WRITE vars                            
        | CONTINUE                              
        | RETURN expression                     
        ;

vars: /* epsilon */                             
        | var                                   
        | var COMMA vars                        
        ;

var: ident                                      
        | ident L_SQUARE_BRACKET expression R_SQUARE_BRACKET
                                                
        ;

bool_exp: relation_and_exp                      
        | relation_and_exp OR bool_exp          
        ;

relation_and_exp: relation_exp                 
        | relation_exp AND relation_and_exp   
        ;

relation_exp: expression comp expression        
        | TRUE                                  
        | FALSE                                 
        | L_PAREN bool_exp R_PAREN              
        | NOT expression comp expression        
        | NOT TRUE                              
        | NOT FALSE                             
        | NOT L_PAREN bool_exp R_PAREN          
        ;

comp: EQ                                        
        | NEQ                                   
        | LT                                   
        | GT                                  
        | LTE                                
        | GTE                               
        ;

expressions: /* epsilon */                 
        | expression                      
        | expression COMMA expressions   
        ;

expression: multiplicative_expression        
        | multiplicative_expression ADD expression
        | multiplicative_expression SUB expression
        ;

multiplicative_expression: term           
        | term MULT multiplicative_expression 
        | term DIV multiplicative_expression 
        | term MOD multiplicative_expression
        ;

term: var                                   
        | number                           
        | L_PAREN expression R_PAREN      
        | SUB var                        
        | SUB NUMBER                     
        | SUB L_PAREN expression R_PAREN   
        | ident L_PAREN expressions R_PAREN
        ;

number: NUMBER                            
        ;


